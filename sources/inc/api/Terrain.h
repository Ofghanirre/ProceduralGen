//
// Created by Antonin Jean on 28/01/2024.
//

#pragma once
#include "noise/INoiseGenerator.h"
#include "noise/Noise.h"

/**
 * @brief A Terrain is a collection of NoiseGenerator, each of them being mapped to a function
 * The function is used to punderate the noise generated by the NoiseGenerator
*/
struct TerrainNode {
    TerrainNode(INoiseGenerator& _noiseGenerator, int (*_mappingFunction)(int)): noiseGenerator(_noiseGenerator), mappingFunction(_mappingFunction) {};

    INoiseGenerator& noiseGenerator;
    int (*mappingFunction)(int);
};

enum NoisePunderationFunction {
    IDENTITY,
    INVERSE,
    SQUARE,
    CUBE,
    ABS,
};

/**
 * @brief A Terrain is a structure representing a compilation of NoiseGenerator
 * Each and every NoiseGenerator is mapped to a function that will be used to punderate the noise generated by the NoiseGenerator
 */
class Terrain {
public:
    explicit Terrain(std::string name, size_t seed): m_name(name), m_seed(seed) {};

    /**
     * @brief Adds a NoiseGenerator to the Terrain
     * @param noiseGenerator the NoiseGenerator to add
     * @param mappingFunction the function to map the noise generated by the NoiseGenerator
     */
    void addTerrainNode(INoiseGenerator& noiseGenerator, int (*mappingFunction)(const int)) {
        m_terrainNodes.push_back({noiseGenerator, mappingFunction});
    }

    void addTerrainNode(INoiseGenerator& noiseGenerator, NoisePunderationFunction eFunction) {
        int (*function)(int);
        switch(eFunction) {
            case (IDENTITY):
                function = [](const int value) { return value; };
                break;
            case (INVERSE):
                function = [](const int value) { return -value; };
                break;
            case (SQUARE):
                function = [](const int value) { return value * value; };
                break;
            case (CUBE):
                function = [](const int value) { return value * value * value; };
                break;
            case (ABS):
                function = [](const int value) { return abs(value); };
                break;
            default:
                throw std::runtime_error("Unknown NoisePunderationFunction");
        }
        addTerrainNode(noiseGenerator, function);
    }

    const std::string &getName() const {
        return m_name;
    }

    const std::vector<TerrainNode> &getTerrainNodes() const {
        return m_terrainNodes;
    }

    /**
     * @brief Generates a bitmap of the terrain
     * @param width the width of the bitmap
     * @param height the height of the bitmap
     * @param frequency the frequency of the bitmap
     * @return the bitmap of the terrain
     */
    Noise getTerrain(size_t width, size_t height, size_t frequency) {
        BitMap<int> bitmap(width, height, 0);
        for (TerrainNode &terrainNode : m_terrainNodes) {
            Noise noise = terrainNode.noiseGenerator.genNoise(m_seed, width, height, frequency);
            for (int h = 0; h < height; ++h) {
                for (int w = 0; w < width; ++w) {
                    int value = noise.getBitmap().get(w, h);
                    bitmap.put(w, h, bitmap.get(w,h) + terrainNode.mappingFunction(value));
                }
            }
        }
        return Noise(bitmap, m_seed, width, height, frequency);
    }

private:
    const size_t m_seed;
    std::string m_name;
    std::vector<TerrainNode> m_terrainNodes;
};
